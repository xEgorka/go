// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/xEgorka/project3/cmd/client/internal/app/auth (interfaces: Auth)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockAuth is a mock of Auth interface.
type MockAuth struct {
	ctrl     *gomock.Controller
	recorder *MockAuthMockRecorder
}

// MockAuthMockRecorder is the mock recorder for MockAuth.
type MockAuthMockRecorder struct {
	mock *MockAuth
}

// NewMockAuth creates a new mock instance.
func NewMockAuth(ctrl *gomock.Controller) *MockAuth {
	mock := &MockAuth{ctrl: ctrl}
	mock.recorder = &MockAuthMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuth) EXPECT() *MockAuthMockRecorder {
	return m.recorder
}

// LoginOffline mocks base method.
func (m *MockAuth) LoginOffline(arg0 context.Context, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoginOffline", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// LoginOffline indicates an expected call of LoginOffline.
func (mr *MockAuthMockRecorder) LoginOffline(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoginOffline", reflect.TypeOf((*MockAuth)(nil).LoginOffline), arg0, arg1, arg2)
}

// LoginOnline mocks base method.
func (m *MockAuth) LoginOnline(arg0 context.Context, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoginOnline", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// LoginOnline indicates an expected call of LoginOnline.
func (mr *MockAuthMockRecorder) LoginOnline(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoginOnline", reflect.TypeOf((*MockAuth)(nil).LoginOnline), arg0, arg1, arg2)
}
