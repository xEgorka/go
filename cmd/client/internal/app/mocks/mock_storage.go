// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/xEgorka/project3/cmd/client/internal/app/storage (interfaces: Storage)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	models "github.com/xEgorka/project3/cmd/client/internal/app/models"
)

// MockStorage is a mock of Storage interface.
type MockStorage struct {
	ctrl     *gomock.Controller
	recorder *MockStorageMockRecorder
}

// MockStorageMockRecorder is the mock recorder for MockStorage.
type MockStorageMockRecorder struct {
	mock *MockStorage
}

// NewMockStorage creates a new mock instance.
func NewMockStorage(ctrl *gomock.Controller) *MockStorage {
	mock := &MockStorage{ctrl: ctrl}
	mock.recorder = &MockStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStorage) EXPECT() *MockStorageMockRecorder {
	return m.recorder
}

// EnterUserData mocks base method.
func (m *MockStorage) EnterUserData(arg0 context.Context, arg1 *models.UserData) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnterUserData", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// EnterUserData indicates an expected call of EnterUserData.
func (mr *MockStorageMockRecorder) EnterUserData(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnterUserData", reflect.TypeOf((*MockStorage)(nil).EnterUserData), arg0, arg1)
}

// GetTimestamp mocks base method.
func (m *MockStorage) GetTimestamp(arg0 context.Context) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTimestamp", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTimestamp indicates an expected call of GetTimestamp.
func (mr *MockStorageMockRecorder) GetTimestamp(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTimestamp", reflect.TypeOf((*MockStorage)(nil).GetTimestamp), arg0)
}

// GetUnmergedUserData mocks base method.
func (m *MockStorage) GetUnmergedUserData(arg0 context.Context, arg1 string) ([]models.UserData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUnmergedUserData", arg0, arg1)
	ret0, _ := ret[0].([]models.UserData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUnmergedUserData indicates an expected call of GetUnmergedUserData.
func (mr *MockStorageMockRecorder) GetUnmergedUserData(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUnmergedUserData", reflect.TypeOf((*MockStorage)(nil).GetUnmergedUserData), arg0, arg1)
}

// IndexUserData mocks base method.
func (m *MockStorage) IndexUserData(arg0 context.Context) ([]models.UserData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IndexUserData", arg0)
	ret0, _ := ret[0].([]models.UserData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IndexUserData indicates an expected call of IndexUserData.
func (mr *MockStorageMockRecorder) IndexUserData(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IndexUserData", reflect.TypeOf((*MockStorage)(nil).IndexUserData), arg0)
}

// PrintUserData mocks base method.
func (m *MockStorage) PrintUserData(arg0 context.Context, arg1 string) (*models.UserData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PrintUserData", arg0, arg1)
	ret0, _ := ret[0].(*models.UserData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PrintUserData indicates an expected call of PrintUserData.
func (mr *MockStorageMockRecorder) PrintUserData(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PrintUserData", reflect.TypeOf((*MockStorage)(nil).PrintUserData), arg0, arg1)
}

// UpdateUserData mocks base method.
func (m *MockStorage) UpdateUserData(arg0 context.Context, arg1 []models.UserData) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserData", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUserData indicates an expected call of UpdateUserData.
func (mr *MockStorageMockRecorder) UpdateUserData(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserData", reflect.TypeOf((*MockStorage)(nil).UpdateUserData), arg0, arg1)
}
